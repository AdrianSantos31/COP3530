#!/bin/sh
# This is a shell archive (produced by GNU sharutils 4.7).
# To extract the files from this archive, save it to some FILE, remove
# everything before the `#!/bin/sh' line above, then type `sh FILE'.
#
lock_dir=_sh06348
# Made on 2017-04-18 10:15 EDT by <n00798593@osprey.unfcsd.unf.edu>.
# Source directory was `/home/93/n00798593/COP3530/homework7'.
#
# Existing files will *not* be overwritten, unless `-c' is specified.
#
# This shar contains:
# length mode       name
# ------ ---------- ------------------------------------------
#   3536 -rw-r--r-- AdjList.c
#   1416 -rw-r--r-- bfs.c
#   3585 -rw-r--r-- createAdjList.c
#   1576 -rw-r--r-- dfs.c
#   3152 -rw-r--r-- main.c
#    300 -rw-r--r-- queueGetFront.c
#    276 -rw-r--r-- queueInsert.c
#    105 -rw-r--r-- queuePeekFront.c
#    101 -rw-r--r-- stackPeek.c
#    156 -rw-r--r-- stackPop.c
#    245 -rw-r--r-- stackPush.c
#   2867 -rw-r--r-- topSort.c
#   1154 -rw-r--r-- my.h
#
MD5SUM=${MD5SUM-md5sum}
f=`${MD5SUM} --version | egrep '^md5sum .*(core|text)utils'`
test -n "${f}" && md5check=true || md5check=false
${md5check} || \
  echo 'Note: not verifying md5sums.  Consider installing GNU coreutils.'
save_IFS="${IFS}"
IFS="${IFS}:"
gettext_dir=FAILED
locale_dir=FAILED
first_param="$1"
for dir in $PATH
do
  if test "$gettext_dir" = FAILED && test -f $dir/gettext \
     && ($dir/gettext --version >/dev/null 2>&1)
  then
    case `$dir/gettext --version 2>&1 | sed 1q` in
      *GNU*) gettext_dir=$dir ;;
    esac
  fi
  if test "$locale_dir" = FAILED && test -f $dir/shar \
     && ($dir/shar --print-text-domain-dir >/dev/null 2>&1)
  then
    locale_dir=`$dir/shar --print-text-domain-dir`
  fi
done
IFS="$save_IFS"
if test "$locale_dir" = FAILED || test "$gettext_dir" = FAILED
then
  echo=echo
else
  TEXTDOMAINDIR=$locale_dir
  export TEXTDOMAINDIR
  TEXTDOMAIN=sharutils
  export TEXTDOMAIN
  echo="$gettext_dir/gettext -s"
fi
if (echo "testing\c"; echo 1,2,3) | grep c >/dev/null
then if (echo -n test; echo 1,2,3) | grep n >/dev/null
     then shar_n= shar_c='
'
     else shar_n=-n shar_c= ; fi
else shar_n= shar_c='\c' ; fi
f=shar-touch.$$
st1=200112312359.59
st2=123123592001.59
st2tr=123123592001.5 # old SysV 14-char limit
st3=1231235901

if touch -am -t ${st1} ${f} >/dev/null 2>&1 && \
   test ! -f ${st1} && test -f ${f}; then
  shar_touch='touch -am -t $1$2$3$4$5$6.$7 "$8"'

elif touch -am ${st2} ${f} >/dev/null 2>&1 && \
   test ! -f ${st2} && test ! -f ${st2tr} && test -f ${f}; then
  shar_touch='touch -am $3$4$5$6$1$2.$7 "$8"'

elif touch -am ${st3} ${f} >/dev/null 2>&1 && \
   test ! -f ${st3} && test -f ${f}; then
  shar_touch='touch -am $3$4$5$6$2 "$8"'

else
  shar_touch=:
  echo
  ${echo} 'WARNING: not restoring timestamps.  Consider getting and'
  ${echo} 'installing GNU `touch'\'', distributed in GNU coreutils...'
  echo
fi
rm -f ${st1} ${st2} ${st2tr} ${st3} ${f}
#
if test ! -d ${lock_dir}
then : ; else ${echo} 'lock directory '${lock_dir}' exists'
  exit 1
fi
if mkdir ${lock_dir}
then ${echo} 'x - created lock directory `'${lock_dir}\''.'
else ${echo} 'x - failed to create lock directory `'${lock_dir}\''.'
  exit 1
fi
# ============= AdjList.c ==============
if test -f 'AdjList.c' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING AdjList.c (file already exists)'
else
${echo} 'x - extracting AdjList.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'AdjList.c' &&
//Library Imports
#include "my.h"
#define MAX_V 26 // This should be a sufficient size for the graphs
X
//Create Adjacency List Method
void AdjList(Vertex* vertices[], FILE* inputFile) {
X
X    //Vertex initialization
X    Vertex* startVertex = vertices[0];
X    Vertex* firstVertex = (Vertex*)malloc(sizeof(Vertex));
X    Vertex* secondVertex = (Vertex*)malloc(sizeof(Vertex));
X
X    //Adjacency List
X    printf("\n");
X    printf("Adjacency List\n");
X    printf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n");
X    while (fscanf(inputFile, "%c %c ", &firstVertex->letter, &secondVertex->letter) == 2) {
X        firstVertex->edges = NULL;
X        secondVertex->edges = NULL;
X        firstVertex->isVisited = false;
X        secondVertex->isVisited = false;
X
X        //Check if vertex has been visited
X        int i;
X        for (i = 0; i < MAX_V; i++) {
X            if (vertices[i]->letter == '?') {
X                *vertices[i] = *firstVertex;
X            }
X
X            if (vertices[i]->letter == firstVertex->letter) {
X                firstVertex = vertices[i];
X                break;
X            }
X        }
X
X        // End vertex
X        for (i = 0; i < MAX_V; i++) {
X            if (vertices[i]->letter == '?') {
X                *vertices[i] = *secondVertex;
X            }
X
X            if (vertices[i]->letter == secondVertex->letter) {
X                secondVertex = vertices[i];
X                break;
X            }
X        }
X
X        Edge* newEdge = (Edge*)malloc(sizeof(Edge));
X        newEdge->nextEdge = NULL;
X        newEdge->connectingVertex = secondVertex;
X
X        //Put the edge to the end of the list
X        if (firstVertex->edges == NULL) {
X            firstVertex->edges = newEdge;
X            firstVertex->edges->nextEdge = NULL;
X            firstVertex->edges->connectingVertex = secondVertex;
X            firstVertex->tailEdge = newEdge;
X        }
X        else {
X            firstVertex->tailEdge->nextEdge = newEdge;
X            firstVertex->tailEdge = newEdge;
X        }
X
X        // Create space for next set of vertices
X        firstVertex = (Vertex*)malloc(sizeof(Vertex));
X        secondVertex = (Vertex*)malloc(sizeof(Vertex));
X    }
X
X    // Since start vertex is adjacent to every other vertex, make sure everyone is adjacent
X    int i;
X    for (i = 1; i < MAX_V; i++) {
X        Edge* edge = startVertex->edges;
X
X        if (vertices[i]->letter == '?') {
X            break;
X        }
X        else {
X            while (edge != NULL) {
X                if (edge->connectingVertex->letter == vertices[i]->letter) {
X                    break;
X                }
X                else if (edge->nextEdge == NULL) {
X                    edge->nextEdge = (Edge*)malloc(sizeof(Edge));
X                    edge->nextEdge->connectingVertex = vertices[i];
X                    edge->nextEdge->nextEdge = NULL;
X                    startVertex->tailEdge = edge->nextEdge;
X                }
X                else {
X                    edge = edge->nextEdge;
X                }
X            }
X        }
X    }
X
X    // Printing the adjacency list
X    for (i = 0; i < MAX_V; i++) {
X        Edge* edge = vertices[i]->edges;
X        if (vertices[i]->letter == '?') {
X            break;
X        }
X        printf("%c || ", vertices[i]->letter);
X          while (edge != NULL){
X            printf("%c ", edge->connectingVertex->letter);
X            edge = edge->nextEdge;
X        }
X        printf("\n");
X    }
X    printf("\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n");
}
SHAR_EOF
  (set 20 17 04 14 19 29 02 'AdjList.c'; eval "$shar_touch") &&
  chmod 0644 'AdjList.c'
if test $? -ne 0
then ${echo} 'restore of AdjList.c failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'AdjList.c: MD5 check failed'
       ) << \SHAR_EOF
b06a4c49c749827f9076490267f295ef  AdjList.c
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'AdjList.c'` -ne 3536 && \
  ${echo} 'restoration warning:  size of AdjList.c is not 3536'
  fi
fi
# ============= bfs.c ==============
if test -f 'bfs.c' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING bfs.c (file already exists)'
else
${echo} 'x - extracting bfs.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'bfs.c' &&
X
#include "my.h"
#define MAX_V 26 // This should be a sufficient size for the graphs
void bfs(Vertex* vertices[]) {
X    Queue vertexQueue;
X    Vertex* topVertex;
X    Edge* nextEdge;
X    vertexQueue.size = 0;
X
X
X    printf("Breadth-First Search:\t");
X
X    // Mark all vertices as unvisited
X    int i;
X    for (i = 0; i < MAX_V; i++) {
X        if (vertices[i]->letter == '?') {
X            printf("%c ", vertices[0]->letter);
X            queueInsert(&vertexQueue, vertices[0]);
X            break;
X        }
X
X        vertices[i]->isVisited = false;
X    }
X
X    while (vertexQueue.size != 0) {
X        topVertex = queuePeekFront(&vertexQueue);
X        nextEdge = topVertex->edges;
X
X        // Were checking all adjacent vertices of the topVertex
X        while (nextEdge != NULL) {
X
X            // Is it unvisited? Mark it, push it in the queue, and move the edge marker
X            if (!nextEdge->connectingVertex->isVisited) {
X                nextEdge->connectingVertex->isVisited = true;
X                queueInsert(&vertexQueue, nextEdge->connectingVertex);
X                printf("%c ", nextEdge->connectingVertex->letter);
X            }
X
X            nextEdge = nextEdge->nextEdge;
X        }
X
X        // All adjacent vertices have been checked, pull next vertex out of queue
X        queueGetFront(&vertexQueue);
X    }
X    printf("\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n");
X
}
SHAR_EOF
  (set 20 17 04 14 19 29 02 'bfs.c'; eval "$shar_touch") &&
  chmod 0644 'bfs.c'
if test $? -ne 0
then ${echo} 'restore of bfs.c failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'bfs.c: MD5 check failed'
       ) << \SHAR_EOF
9b17895a20d4655280dd6b0851e872b5  bfs.c
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'bfs.c'` -ne 1416 && \
  ${echo} 'restoration warning:  size of bfs.c is not 1416'
  fi
fi
# ============= createAdjList.c ==============
if test -f 'createAdjList.c' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING createAdjList.c (file already exists)'
else
${echo} 'x - extracting createAdjList.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'createAdjList.c' &&
X
//Library Imports
#include "my.h"
#define MAX_V 26 // This should be a sufficient size for the graphs
X
//Create Adjacency List Method
void createAdjList(Vertex* vertices[], FILE* inputFile) {
X
X    //Vertex initialization
X    Vertex* startVertex = vertices[0];
X    Vertex* firstVertex = (Vertex*)malloc(sizeof(Vertex));
X    Vertex* secondVertex = (Vertex*)malloc(sizeof(Vertex));
X
X    //Adjacency List
X    printf("\n");
X    printf("Adjacency List\n");
X    printf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n");
X    while (fscanf(inputFile, "%c %c ", &firstVertex->letter, &secondVertex->letter) == 2) {
X        firstVertex->edges = NULL;
X        secondVertex->edges = NULL;
X        firstVertex->isVisited = false;
X        secondVertex->isVisited = false;
X
X        //Check if vertex has been visited
X        int i;
X        for (i = 0; i < MAX_V; i++) {
X            if (vertices[i]->letter == '?') {
X                *vertices[i] = *firstVertex;
X            }
X
X            if (vertices[i]->letter == firstVertex->letter) {
X                firstVertex = vertices[i];
X                break;
X            }
X        }
X
X        // End vertex
X        for (i = 0; i < MAX_V; i++) {
X            if (vertices[i]->letter == '?') {
X                *vertices[i] = *secondVertex;
X            }
X
X            if (vertices[i]->letter == secondVertex->letter) {
X                secondVertex = vertices[i];
X                break;
X            }
X        }
X
X        Edge* newEdge = (Edge*)malloc(sizeof(Edge));
X        newEdge->nextEdge = NULL;
X        newEdge->connectingVertex = secondVertex;
X
X        //Put the edge to the end of the list
X        if (firstVertex->edges == NULL) {
X            firstVertex->edges = newEdge;
X            firstVertex->edges->nextEdge = NULL;
X            firstVertex->edges->connectingVertex = secondVertex;
X            firstVertex->tailEdge = newEdge;
X        }
X        else {
X            firstVertex->tailEdge->nextEdge = newEdge;
X            firstVertex->tailEdge = newEdge;
X        }
X
X        // Create space for next set of vertices
X        firstVertex = (Vertex*)malloc(sizeof(Vertex));
X        secondVertex = (Vertex*)malloc(sizeof(Vertex));
X    }
X
X    // Since start vertex is adjacent to every other vertex, make sure everyone is adjacent
X    int i;
X    for (i = 1; i < MAX_V; i++) {
X        Edge* edge = startVertex->edges;
X
X        if (vertices[i]->letter == '?') {
X            break;
X        }
X        else {
X            while (edge != NULL) {
X                if (edge->connectingVertex->letter == vertices[i]->letter) {
X                    break;
X                }
X                else if (edge->nextEdge == NULL) {
X                    edge->nextEdge = (Edge*)malloc(sizeof(Edge));
X                    edge->nextEdge->connectingVertex = vertices[i];
X                    edge->nextEdge->nextEdge = NULL;
X                    startVertex->tailEdge = edge->nextEdge;
X                }
X                else {
X                    edge = edge->nextEdge;
X                }
X            }
X        }
X    }
X
X    // Printing the adjacency list
X    for (i = 0; i < MAX_V; i++) {
X        Edge* edge = vertices[i]->edges;
X        if (vertices[i]->letter == '?') {
X            break;
X        }
X        printf("%c || ", vertices[i]->letter);
X
X          while (edge!= NULL){
X            printf("%c ", edge->connectingVertex->letter);
X            edge = edge->nextEdge;
X		if(edge!=NULL){
X	  	    printf("-> ");
X		}
X	    }
X        printf("\n");
X    }
X    printf("\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n");
}
SHAR_EOF
  (set 20 17 04 18 10 13 20 'createAdjList.c'; eval "$shar_touch") &&
  chmod 0644 'createAdjList.c'
if test $? -ne 0
then ${echo} 'restore of createAdjList.c failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'createAdjList.c: MD5 check failed'
       ) << \SHAR_EOF
e2afcb339733f62d1b1e2fcc82ad50c9  createAdjList.c
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'createAdjList.c'` -ne 3585 && \
  ${echo} 'restoration warning:  size of createAdjList.c is not 3585'
  fi
fi
# ============= dfs.c ==============
if test -f 'dfs.c' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING dfs.c (file already exists)'
else
${echo} 'x - extracting dfs.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'dfs.c' &&
#include "my.h"
#define MAX_V 26 // This should be a sufficient size for the graphs
X
void dfs(Vertex* vertices[]) {
X    Stack vertexStack;
X    Vertex* topVertex;
X    Edge* nextEdge;
X    vertexStack.size = 0;
X
X    printf("Depth-First Search:\t");
X
X    // Mark all vertices as unvisited
X    int i;
X    for (i = 0; i < MAX_V; i++) {
X        if (vertices[i]->letter == '?') {
X            vertices[0]->isVisited = true;
X            printf("%c ", vertices[0]->letter);
X            stackPush(&vertexStack, vertices[0]);
X            break;
X        }
X
X        vertices[i]->isVisited = false;
X    }
X
X
X    while (vertexStack.size != 0) {
X        topVertex = stackPeek(&vertexStack);
X        nextEdge = topVertex->edges;
X
X        // Visit the next unvisited adjacent vertex
X        while (nextEdge != NULL) {
X
X            // Not visited? Mark it visited, push it into the stack, and set it as the top vertex
X            if (!nextEdge->connectingVertex->isVisited) {
X                nextEdge->connectingVertex->isVisited = true;
X                printf("%c ", nextEdge->connectingVertex->letter);
X                stackPush(&vertexStack, nextEdge->connectingVertex);
X                topVertex = nextEdge->connectingVertex;
X                nextEdge = topVertex->edges;
X            }
X            else {
X                nextEdge = nextEdge->nextEdge;
X            }
X        }
X
X        // Vertex has no unvisited neighbors, pop the next one off of the stack
X        stackPop(&vertexStack);
X    }
X
X    printf("\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n");
}
SHAR_EOF
  (set 20 17 04 14 19 29 02 'dfs.c'; eval "$shar_touch") &&
  chmod 0644 'dfs.c'
if test $? -ne 0
then ${echo} 'restore of dfs.c failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'dfs.c: MD5 check failed'
       ) << \SHAR_EOF
d00c093f0e28bb5791dd746abaaccedd  dfs.c
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'dfs.c'` -ne 1576 && \
  ${echo} 'restoration warning:  size of dfs.c is not 1576'
  fi
fi
# ============= main.c ==============
if test -f 'main.c' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING main.c (file already exists)'
else
${echo} 'x - extracting main.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'main.c' &&
/*
* * * * * * * * * * * * * Homework 7 * * * * * * * * * * * * * * * * * * * * * * *
X
* * * * * * * * * * * * * * * * * * * * * *
*  Written by: Adrian Santos (N00798593)  *
*  Date: 04/13/2017                       *
* * * * * * * * * * * * * * * * * * * * * *
X
1.  This program is to be written in C.
2.  You should write individual functions stored in separate files (one
function per file) and each function should use an include statement
for your header file.
3.  You should use one appropriate header file for all your structures
and for the prototypes of the functions you write
4.  You should not have any global variables in your
header file.
5.  You should use put all your .c's and your headerfile
myheader.h  in a separate folder
and shar those files together, $ shar -T *.c  myheader.h >bigone
6.  You should use turnin , $ turnin bigone kmartin.cop3530.a7
X
There will be deducts if any of the "rules " 1-4 are not followed (no
credit for a program written in Java);
X -25 for not using individual functions in individual files;
X -10 for not using a header file;
and -25 for using global variables in your header file.
X
I will run the program on Osprey using gcc :
$ gcc *.c
$ ./a.out myfile
(note this is NOT redirection and it is MY choice as to the name of the
data file, so use must program for a command line file name.)
X
X
myfile will consist of the vertices (single letters) for a directed,
unweighted graph.
e.g.  A  B
X      B  C
X      E  X
X      C  D
X      A  C
X
would indicate there are edges from A to B, B to C, E to X, C to D, and
A to C.
X
The array of vertices in this case would be [A,B,C,E,X D]
but this would not be all the edges because you may assume that all of
the vertices are reachable from the first vertex (A in this case).
You should start your depth first and breadth first searches from the
first vertex so that all the vertices are printed.
X
Here are the functions your program should call with no prompts whatsover:
a. Print the graph as  adjacency lists (see Table 13.2).  (If you get this properly for
adjacency lists you earn  an 85.)
b. Call the depth first search. (5 more points.)
c. Call the breadth first search. (5 more points.)
d. Call the topological sort (you may assume there are
no cycles--see pg. 654) (5 more points.)
X
So you should have functions that build the adjacency lists, perform the
depth first search, perform the breadth first search, and perform the
topological sort.   You MUST use adjacency lists to construct the graph,
NOT a 2x2 array.
*/
X
X
X
//Library Imports
#include "my.h"
#define MAX_V 26 // This should be a sufficient size for the graphs
X
//Main Method
int main(int argc, char* argv[]) {
X    FILE* inputFile = fopen(argv[1], "r");
X
X    if (inputFile == NULL) {
X        printf("Error: File cannot be found, please try again: \n");
X        return(1);
X    }
X
X    Vertex* vertices[MAX_V];
X    int i;//for loop initialization
X    for (i = 0; i < MAX_V; i++) {
X        vertices[i] = (Vertex*)malloc(sizeof(Vertex));
X        vertices[i]->letter = '?';
X    }
X
X    createAdjList(vertices, inputFile);
X    dfs(vertices);
X    bfs(vertices);
X    topSort(vertices);
X
X    return(0);
}
SHAR_EOF
  (set 20 17 04 18 10 08 32 'main.c'; eval "$shar_touch") &&
  chmod 0644 'main.c'
if test $? -ne 0
then ${echo} 'restore of main.c failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'main.c: MD5 check failed'
       ) << \SHAR_EOF
4c770d56088bbdd5aea57327e0394623  main.c
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'main.c'` -ne 3152 && \
  ${echo} 'restoration warning:  size of main.c is not 3152'
  fi
fi
# ============= queueGetFront.c ==============
if test -f 'queueGetFront.c' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING queueGetFront.c (file already exists)'
else
${echo} 'x - extracting queueGetFront.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'queueGetFront.c' &&
X
#include "my.h"
X
Vertex* queueGetFront(Queue* queue) {
X    if (queue->size > 0) {
X        Vertex* frontVertex = queue->vertexQueue[0];
X        queue->size--;
X
X        int i;
X        for (i = 0; i < queue->size; i++) {
X            queue->vertexQueue[i] = queue->vertexQueue[i + 1];
X        }
X    }
}
SHAR_EOF
  (set 20 17 04 14 19 29 02 'queueGetFront.c'; eval "$shar_touch") &&
  chmod 0644 'queueGetFront.c'
if test $? -ne 0
then ${echo} 'restore of queueGetFront.c failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'queueGetFront.c: MD5 check failed'
       ) << \SHAR_EOF
c636dcc73d33409a2e3d822d94e60aaf  queueGetFront.c
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'queueGetFront.c'` -ne 300 && \
  ${echo} 'restoration warning:  size of queueGetFront.c is not 300'
  fi
fi
# ============= queueInsert.c ==============
if test -f 'queueInsert.c' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING queueInsert.c (file already exists)'
else
${echo} 'x - extracting queueInsert.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'queueInsert.c' &&
X
#include "my.h"
#define MAX_V 26 // This should be a sufficient size for the graphs
void queueInsert(Queue* vertexQueue, Vertex* vertex) {
X    if (vertexQueue->size < MAX_V) {
X        vertexQueue->vertexQueue[vertexQueue->size] = vertex;
X        vertexQueue->size++;
X    }
}
SHAR_EOF
  (set 20 17 04 14 19 29 02 'queueInsert.c'; eval "$shar_touch") &&
  chmod 0644 'queueInsert.c'
if test $? -ne 0
then ${echo} 'restore of queueInsert.c failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'queueInsert.c: MD5 check failed'
       ) << \SHAR_EOF
13069e63446e2d68eb539f8b4ad7f156  queueInsert.c
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'queueInsert.c'` -ne 276 && \
  ${echo} 'restoration warning:  size of queueInsert.c is not 276'
  fi
fi
# ============= queuePeekFront.c ==============
if test -f 'queuePeekFront.c' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING queuePeekFront.c (file already exists)'
else
${echo} 'x - extracting queuePeekFront.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'queuePeekFront.c' &&
X
#include "my.h"
X
Vertex* queuePeekFront(Queue* vertexQueue) {
X    return vertexQueue->vertexQueue[0];
}
SHAR_EOF
  (set 20 17 04 14 19 29 02 'queuePeekFront.c'; eval "$shar_touch") &&
  chmod 0644 'queuePeekFront.c'
if test $? -ne 0
then ${echo} 'restore of queuePeekFront.c failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'queuePeekFront.c: MD5 check failed'
       ) << \SHAR_EOF
17d7f94a9a10c741b11354d99dbb8172  queuePeekFront.c
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'queuePeekFront.c'` -ne 105 && \
  ${echo} 'restoration warning:  size of queuePeekFront.c is not 105'
  fi
fi
# ============= stackPeek.c ==============
if test -f 'stackPeek.c' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING stackPeek.c (file already exists)'
else
${echo} 'x - extracting stackPeek.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'stackPeek.c' &&
#include "my.h"
X
Vertex* stackPeek(Stack *stack) {
X    return stack->vertexStack[stack->size - 1];
}
SHAR_EOF
  (set 20 17 04 14 19 29 02 'stackPeek.c'; eval "$shar_touch") &&
  chmod 0644 'stackPeek.c'
if test $? -ne 0
then ${echo} 'restore of stackPeek.c failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'stackPeek.c: MD5 check failed'
       ) << \SHAR_EOF
49ea4bcde172da86cebb318aebd87b41  stackPeek.c
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'stackPeek.c'` -ne 101 && \
  ${echo} 'restoration warning:  size of stackPeek.c is not 101'
  fi
fi
# ============= stackPop.c ==============
if test -f 'stackPop.c' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING stackPop.c (file already exists)'
else
${echo} 'x - extracting stackPop.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'stackPop.c' &&
#include "my.h"
X
Vertex* stackPop(Stack *stack) {
X    if (stack->size > 0) {
X        stack->size--;
X        return stack->vertexStack[stack->size];
X    }
}
SHAR_EOF
  (set 20 17 04 14 19 29 02 'stackPop.c'; eval "$shar_touch") &&
  chmod 0644 'stackPop.c'
if test $? -ne 0
then ${echo} 'restore of stackPop.c failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'stackPop.c: MD5 check failed'
       ) << \SHAR_EOF
476b2fe533f013524a64403fa56cd2a7  stackPop.c
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'stackPop.c'` -ne 156 && \
  ${echo} 'restoration warning:  size of stackPop.c is not 156'
  fi
fi
# ============= stackPush.c ==============
if test -f 'stackPush.c' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING stackPush.c (file already exists)'
else
${echo} 'x - extracting stackPush.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'stackPush.c' &&
#include "my.h"
#define MAX_V 26 // This should be a sufficient size for the graphs
void stackPush(Stack *stack, Vertex *element) {
X    if (stack->size < MAX_V) {
X        stack->vertexStack[stack->size] = element;
X        stack->size++;
X    }
}
SHAR_EOF
  (set 20 17 04 14 19 29 02 'stackPush.c'; eval "$shar_touch") &&
  chmod 0644 'stackPush.c'
if test $? -ne 0
then ${echo} 'restore of stackPush.c failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'stackPush.c: MD5 check failed'
       ) << \SHAR_EOF
20f9f7196c709a3b3d560c4a56333474  stackPush.c
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'stackPush.c'` -ne 245 && \
  ${echo} 'restoration warning:  size of stackPush.c is not 245'
  fi
fi
# ============= topSort.c ==============
if test -f 'topSort.c' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING topSort.c (file already exists)'
else
${echo} 'x - extracting topSort.c (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'topSort.c' &&
X
#include "my.h"
#define MAX_V 26 // This should be a sufficient size for the graphs
X
void topSort(Vertex* vertices[]) {
X    char sortedVertices[MAX_V];
X    int i;
X    for (i = 0; i < MAX_V; i++) {
X        sortedVertices[i] = '?';
X    }
X
X    printf("Topological Sort:\t");
X
X    // While there are still edges in the start vertex
X    while (vertices[0]->edges != NULL) {
X
X        // Search the vertex array for the next vertex with no edges
X        for (i = 0; i < MAX_V; i++) {
X            if (vertices[i]->letter == '?') {
X                break;
X            }
X
X            // Found one!
X            if (vertices[i]->edges == NULL) {
X
X                // Make sure it hasn't already been counted.
X                // If it has, then continue.
X                bool alreadyCounted = false;
X                int j;
X                for (j = 0; j < MAX_V; j++) {
X                    if (sortedVertices[j] == '?') {
X                        break;
X                    }
X
X                    if (sortedVertices[j] == vertices[i]->letter) {
X                        alreadyCounted = true;
X                        break;
X                    }
X                }
X                if (alreadyCounted) {
X                    continue;
X                }
X
X                // Place entry in next available spot in sortedVertices array
X                for (j = 0; j < MAX_V; j++) {
X                    if (sortedVertices[j] == '?') {
X                        sortedVertices[j] = vertices[i]->letter;
X                        break;
X                    }
X                }
X
X                // Now remove all edge references to this vertex
X                for (j = 0; j < MAX_V; j++) {
X                    if (vertices[j]->letter == '?') {
X                        break;
X                    }
X
X                    Edge** checkEdge = &(vertices[j]->edges);
X
X                    while ((*checkEdge) != NULL) {
X                        if ((*checkEdge)->connectingVertex->letter == vertices[i]->letter) {
X                            if ((*checkEdge)->nextEdge == NULL) {
X                                *checkEdge = NULL;
X                            }
X                            else {
X                                *checkEdge = (*checkEdge)->nextEdge;
X                            }
X
X                            break;
X                        }
X
X                        checkEdge = &((*checkEdge)->nextEdge);
X                    }
X                }
X            }
X        }
X    }
X
X    // Finally, push the start vertex in last and print results.
X    for (i = 0; i < MAX_V; i++) {
X        if (sortedVertices[i] == '?') {
X            sortedVertices[i] = vertices[0]->letter;
X            printf("%c ", sortedVertices[i]);
X            break;
X        }
X
X        printf("%c ", sortedVertices[i]);
X    }
X
X    printf("\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n");
}
SHAR_EOF
  (set 20 17 04 14 19 29 02 'topSort.c'; eval "$shar_touch") &&
  chmod 0644 'topSort.c'
if test $? -ne 0
then ${echo} 'restore of topSort.c failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'topSort.c: MD5 check failed'
       ) << \SHAR_EOF
83739573eb3907bdd30b82235a1fe322  topSort.c
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'topSort.c'` -ne 2867 && \
  ${echo} 'restoration warning:  size of topSort.c is not 2867'
  fi
fi
# ============= my.h ==============
if test -f 'my.h' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING my.h (file already exists)'
else
${echo} 'x - extracting my.h (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'my.h' &&
X
//Library Imports
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
X
//Structures
struct EdgeTag;
struct VStack;
struct VTag;
struct VQueue;
X
//Method Headers
void bfs(struct VTag* vertices[]);
void AdjList(struct VTag* vertices[], FILE* inputFile);
void dfs(struct VTag* vertices[]);
int main(int argc, char* argv[]);
struct VTag* queueGetFront(struct VQueue* queue);
void queueInsert(struct VQueue* queue, struct VTag* vertex);
struct VTag* queuePeekFront(struct VQueue* queue);
struct VTag* stackPeek(struct VStack* stack);
struct VTag* stackPop(struct VStack* stack);
void stackPush(struct VStack* stack, struct VTag* vertex);
void topSort(struct VTag* vertices[]);
X
//Structure Definitions
//Vertex
typedef struct VTag {
X    char letter;
X    bool isVisited;
X    struct EdgeTag* edges;
X    struct EdgeTag* tailEdge;
} Vertex;
X
//Edge
typedef struct EdgeTag {
X    struct VTag* connectingVertex;
X    struct EdgeTag* nextEdge;
} Edge;
X
//Stack
typedef struct VStack {
X    struct VTag* vertexStack[26];
X    int size;
} Stack;
X
//Vertex Queue
typedef struct VQueue {
X    struct VTag* vertexQueue[26];
X    int size;
} Queue;
SHAR_EOF
  (set 20 17 04 14 19 29 02 'my.h'; eval "$shar_touch") &&
  chmod 0644 'my.h'
if test $? -ne 0
then ${echo} 'restore of my.h failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'my.h: MD5 check failed'
       ) << \SHAR_EOF
dbdf6e4694860ff0b862f42e9ea92132  my.h
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'my.h'` -ne 1154 && \
  ${echo} 'restoration warning:  size of my.h is not 1154'
  fi
fi
if rm -fr ${lock_dir}
then ${echo} 'x - removed lock directory `'${lock_dir}\''.'
else ${echo} 'x - failed to remove lock directory `'${lock_dir}\''.'
  exit 1
fi
exit 0
